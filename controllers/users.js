const bcrypt = require('bcryptjs')
const { validationResult } = require('express-validator')
const jwt = require('jsonwebtoken')

const User = require("../models/user")

exports.signup = async (req, res, next) => {
    const errors = validationResult(req)
    if(!errors.isEmpty()){
        const error = new Error("Validation failed")
        error.statusCode = 422
        error.data = errors.array()
        throw error
    }
    const email = req.body.email
    const username = req.body.name
    const password = req.body.password
    try {
        const hashedPassword = await bcrypt.hash(password, 12)
        const user = new User({
            email: email, 
            username: username, 
            password: hashedPassword
        })
        const newUser = await user.save()
        res.status(201).json({message: "New user signed up successfully", userId: newUser._id})
    } catch (error) {
        if(!err.statusCode){
            err.statusCode = 500
        }
        next(err)   
    }
}

exports.login = async (req, res, next) => {
    const email = req.body.email
    const password = req.body.password

    try {
        const user = await User.findOne({email: email})
        if(!user){
            const error = new Error("User not found!, please sign up")
            error.statusCode = 401
            throw error
        }
        
        const correctPassword = bcrypt.compare(password, user.password)
        if(!correctPassword){
            const error = new Error("Password incorrect!")
            error.statusCode = 401
            throw error
        }
        
        const token = jwt.sign(
            { email: user.email, id: user._id.toString() },
            "hsYUJ&8s7IJS33skckabtuQDTT9sstsk",
            { expiresIn: '1h'}
            );
        res.status(200).json({token: token, userId: user._id.toString()})
        
    } catch (error) {
        if(!err.statusCode){
            err.statusCode = 500
        }
        next(err)   
    }
    
}

// I don't need a session (so, nothing is stored on the server) 
// but a token, because restful APIs are stateless, and don't
// require any kinda data attached to users upon every request

// Instead, upon login, a token is generated by the server, 
// which is then stored in the browser, and every subsequent 
// request by the client sends this token which is then 
// validated by the server (which created the token)

// every request is standalone and has all the required data
// needed to authenticate itself

// JSON data 
//   + 
// signature => what server actually verifies
//   ||
// JSON web token